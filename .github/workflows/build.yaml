name: Build

on:
  push:
    branches:
      - main
    tags-ignore:
      - '**'

  pull_request:

  workflow_call:
    inputs:
      release-summary:
        description: Summary of the release
        required: false
        type: string
        default: ""
      release-url:
        description: URL to the release notes
        required: false
        type: string
        default: ""
      release-version:
        description: Version of the release
        required: false
        type: string
        default: ""

  workflow_dispatch:

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Generate version
        id: version
        run: |
          if [ -n "${{ inputs.release-version }}" ]; then
            version=${{ inputs.release-version }}
          else
            version=dev-$(date +'%Y%m%d-%H%M')
          fi
          echo version=$version >> $GITHUB_OUTPUT

  configuration:
    name: Build configuration list
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: echo "matrix=$(ls *.yaml | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  build:
    name: Build ${{ matrix.config-file }}
    needs:
      - prepare
      - configuration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config-file: ${{ fromJson(needs.configuration.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Build firmware
        uses: esphome/build-action@v4
        id: esphome-build
        with:
          yaml-file: ${{ matrix.config-file }}
          version: latest
          complete-manifest: true
          release-summary: ${{ inputs.release-summary }}
          release-url: ${{ inputs.release-url }}
      - name: Move files for versioning
        run: |
          mkdir -p output/${{ needs.prepare.outputs.version }}
          mv ${{ steps.esphome-build.outputs.name }}/* output/${{ needs.prepare.outputs.version }}/
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ format('svitlobot-healthcheck-{0}', steps.esphome-build.outputs.name) }}
          path: output

  combine:
    name: Combine manifests
    needs:
      - prepare
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: files
          pattern: svitlobot-healthcheck_*

      - name: Get artifact names
        id: artifacts
        run: |
          artifacts=$(ls --format=single-column files)
          echo "artifacts<<EOF" >> $GITHUB_OUTPUT
          echo "$artifacts" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v5.0.0
        with:
          name: ${{ steps.artifacts.outputs.artifacts }}

      - name: Combine all parts into a single manifest
        run: |
          version="${{ needs.prepare.outputs.version }}"
          mkdir -p "output/$version"
          pushd files
          for device in *; do
            pushd $device
            pushd $version
            cp * "../../../output/$version/"
            popd
            popd
          done
          popd
          jq -s '(.[0] | del(.builds)) + {"builds": (reduce .[].builds as $b ([]; . + $b))}' files/*/$version/manifest.json > output/$version/manifest.json

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: svitlobot-healthcheck
          path: output

  ci-status:
    name: Status
    runs-on: ubuntu-latest
    needs:
      - combine
    if: always()
    steps:
      - name: Success
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: exit 0
      - name: Failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1
